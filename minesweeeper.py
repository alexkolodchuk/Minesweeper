# Аналог Сапёра (Minesweeper) на языке Python 3.8.2.
# Ничего сложного.

# Импортируем модули
import random
from time import sleep

try:
    
stats = [0, 0, 0]

# Перевод из значений карты в значения программные.
# Всё потом поймётё.
def _(__):
    if __ == '1':
        _ = 0
    elif __ == '2':
        _ = 1
    elif __ == '3':
        _ = 2
    elif __ == '4':
        _ = 3
    elif __ == '5':
        _ = 4
    elif __ == '6':
        _ = 5
    elif __ == '7':
        _ = 6
    elif __ == '8':
        _ = 7
    elif __ == '9':
        _ = 8
    elif __ == 'A' or __ == 'a':
        _ = 9
    elif __ == 'B' or __ == 'b':
        _ = 10
    elif __ == 'C' or __ == 'c':
        _ = 11
    elif __ == 'D' or __ == 'd':
        _ = 12
    elif __ == 'E' or __ == 'e':
        _ = 13
    elif __ == 'F' or __ == 'f':
        _ = 14
    elif __ == 'G' or __ == 'g':
        _ = 15
    elif __ == 'H' or __ == 'h':
        _ = 16
    elif __ == 'I' or __ == 'i':
        _ = 17
    elif __ == 'J' or __ == 'j':
        _ = 18
    elif __ == 'K' or __ == 'k':
        _ = 19
    elif __ == 'L' or __ == 'l':
        _ = 20
    elif __ == 'M' or __ == 'm':
        _ = 21
    elif __ == 'N' or __ == 'n':
        _ = 22
    elif __ == 'O' or __ == 'o':
        _ = 23
    elif __ == 'P' or __ == 'p':
        _ = 24
    elif __ == 'Q' or __ == 'q':
        _ = 25
    elif __ == 'R' or __ == 'r':
        _ = 26
    elif __ == 'S' or __ == 's':
        _ = 27
    elif __ == 'T' or __ == 't':
        _ = 28
    elif __ == 'U' or __ == 'u':
        _ = 29
    elif __ == 'V' or __ == 'v':
        _ = 30
    elif __ == 'W' or __ == 'w':
        _ = 31
    elif __ == 'X' or __ == 'x':
        _ = 32
    elif __ == 'Y' or __ == 'y':
        _ = 33
    elif __ == 'Z' or __ == 'z':
        _ = 34
    else:
        _ = 'UnboundLocalError: invalid input.'
    return _

# Вся программа построена на огромном списке с вложенными списками с вложенными
# списками. Каждая клетка - список с 3-мя значениями.
# Например, ['0', ' ', 'c'].
# Первое значение - либо '0', либо '1'. Это значит, есть ли в клетке бомба или нет.
# Это значение генерируется рандомно по карте согласно параметрам.
# Второе значение - сколько бомб вокруг клетки. Если 0, то пишет ' '.
# Третье значение - режим клетки. 'c' - значит 'closed', 'закрыта'.
# 'o' - значит 'opened', 'открыта'. 'f' - значит 'flagged', 'помечена'.
# Собираются все списки в одной строке в ещё один большой список. А потом все
# строки по порядку - в последний. Итак, чтобы добраться до клетки, нужно написать
# список[y][x]. Соответственно три значения получаются прибавлением [0], [1] и [2].

# Функция открытия клетки на карте.

#   | 1 | 2 | 3 |
# --+---+---+---+
# 1 |   |   |   |
# --+---+---+---+
# 2 |   |   |   |
# --+---+---+---+
# 3 |   |   |   |
# --+---+---+---+

# Мы берём следующие значения:
# y, x - значения сетки карты.
# _y, _x - координаты клетки.
# l (это L, а не один) - главный список программы.

def open_case(y, x, _y, _x, l):
    # 1. Если клетка, которую нужно открыть, не открыта...
    if l[_y][_x][2] == 'c' or l[_y][_x][2] == 'f':

        # 2. И она не заминирована...
        if l[_y][_x][0] == '0':

            # 3. И вокруг неё нет мин...
            if l[_y][_x][1] == ' ':

                # Сначала - логично - откроем её.
                l[_y][_x][2] = 'o'

                # Теперь смотрим по небольшой карте вверху.
                # Если она в верхнем ряду...
                if _y == 0:

                    # Если она в левом верхнем углу,
                    # открываем все клетки рядом. В этом случае их 3.
                    # Мы используем эту же функцию ещё раз. Она уже
                    # начнёт проверять эти клетки.
                    if _x == 0:
                        open_case(y, x, 0, 1, l)
                        open_case(y, x, 1, 1, l)
                        open_case(y, x, 1, 0, l)

                    # Если она в правом верхнем углу.
                    elif _x == x-1:
                        open_case(y, x, 1, _x, l)
                        open_case(y, x, 1, _x-1, l)
                        open_case(y, x, 0, _x-1, l)

                    # Если просто вверху.
                    else:
                        open_case(y, x, 0, _x-1, l)
                        open_case(y, x, 1, _x-1, l)
                        open_case(y, x, 1, _x, l)
                        open_case(y, x, 1, _x+1, l)
                        open_case(y, x, 0, _x+1, l)

                # Если она в нижнем ряду...
                elif _y == y-1:

                    # Если она в нижнем левом углу.
                    if _x == 0:
                        open_case(y, x, _y-1, _x, l)
                        open_case(y, x, _y-1, _x+1, l)
                        open_case(y, x, _y, _x+1, l)

                    # Если она в нижнем правом углу.
                    elif _x == x-1:
                        open_case(y, x, _y-1, _x, l)
                        open_case(y, x, _y-1, _x-1, l)
                        open_case(y, x, _y, _x-1, l)

                    # Если просто внизу.
                    else:
                        open_case(y, x, _y, _x-1, l)
                        open_case(y, x, _y-1, _x-1, l)
                        open_case(y, x, _y-1, _x, l)
                        open_case(y, x, _y-1, _x+1, l)
                        open_case(y, x, _y, _x+1, l)

                # Если она в средних рядах...
                else:

                    # Если просто слева.
                    if _x == 0:
                        open_case(y, x, _y-1, _x, l)
                        open_case(y, x, _y-1, _x+1, l)
                        open_case(y, x, _y, _x+1, l)
                        open_case(y, x, _y+1, _x, l)
                        open_case(y, x, _y+1, _x+1, l)

                    # Если просто справа.
                    elif _x == x-1:
                        open_case(y, x, _y-1, _x, l)
                        open_case(y, x, _y-1, _x-1, l)
                        open_case(y, x, _y, _x-1, l)
                        open_case(y, x, _y+1, _x-1, l)
                        open_case(y, x, _y+1, _x, l)

                    # Если вообще не у стены.
                    else:
                        open_case(y, x, _y-1, _x-1, l)
                        open_case(y, x, _y-1, _x, l)
                        open_case(y, x, _y-1, _x+1, l)
                        open_case(y, x, _y, _x-1, l)
                        open_case(y, x, _y, _x+1, l)
                        open_case(y, x, _y+1, _x-1, l)
                        open_case(y, x, _y+1, _x, l)
                        open_case(y, x, _y+1, _x+1, l)
                        
                return False

            # 3. А если вокруг неё есть мины, то просто открываем её одну.
            else:
                l[_y][_x][2] = 'o'
                return False

        # 2. А если она заминирована, то не открываем её, но посылаем проигрышный сигнал.
        elif l[_y][_x][0] == '1':
            return True

    # 1. А если клетка уже открыта, ничего не происходит.
    elif l[_y][_x][2] == 'o':
        return False

#   | 1 | 2 | 3 |
# --+---+---+---+
# 1 | # | # | # |
# --+---+---+---+
# 2 | # | # | # |
# --+---+---+---+
# 3 | # | # | # |
# --+---+---+---+

# Эта функция считает количество мин вокруг клетки.
# Возвращает строки '1', '2', '3', '4', '5', '6',
# '7', '8' и ' '.

def index(x, y, x_, y_, l):
    if y_ == 0:
        # Вариант 11.
        if x_ == 0:
            index = int(l[0][1]) + int(l[1][1]) + int(l[1][0])
            #print("Вариант 11. Проверил клетки 01, 11, 10")

        # Вариант 13.
        elif x_ == x-1:
            index = int(l[0][x_-1]) + int(l[1][x_-1]) + int(l[1][x_])
            #print("Вариант 13. Проверил клетки 0"+str(x_-1)+", 1"+str(x_-1)+", 1"+str(x_))

        # Вариант 12.
        else:
            index = int(l[0][x_-1]) + int(l[0][x_+1]) + int(l[1][x_+1]) + int(l[1][x_]) + int(l[1][x_-1])
            #print("Вариант 12. Проверил клетки 0"+str(x_-1)+", 0"+str(x_+1)+", 1"+str(x_+1)+", 1"+str(x_-1)+", 1"+str(x_))


    elif y_ == y-1:
        # Вариант 31.
        if x_ == 0:
            index = int(l[y_][1]) + int(l[y_-1][1]) + int(l[y_-1][0])
            #print("Вариант 31. Проверил клетки "+str(y_)+"1, "+str(y_-1)+"1, "+str(y_-1)+"0")

        # Вариант 33.
        elif x_ == x-1:
            index = int(l[y_-1][x_-1]) + int(l[y_-1][x_]) + int(l[y_][x_-1])
            #print("Вариант 33. Проверил клетки "+str(y_-1)+str(x_-1)+", "+str(y_-1)+str(x_)+", "+str(y_)+str(x_-1))

        # Вариант 32.
        else:
            index = int(l[y_-1][x_-1]) + int(l[y_-1][x_]) + int(l[y_-1][x_+1]) + int(l[y_][x_-1]) + int(l[y_][x_+1])
            #print("Вариант 32. Проверил клетки "+str(y_-1)+str(x_-1)+", "+str(y_-1)+str(x_)+", "+str(y_-1)+str(x_+1)+", "+str(y_)+str(x_-1)+", "+str(y_)+str(x_+1))


    else:
        # Вариант 21.
        if x_ == 0:
            index = int(l[y_-1][0]) + int(l[y_-1][1]) + int(l[y_][1]) + int(l[y_+1][0]) + int(l[y_+1][1])
            #print("Вариант 21. Проверил клетки "+str(y_-1)+"0, "+str(y_-1)+"1, "+str(y_)+"1, "+str(y_+1)+"0, "+str(y_+1)+"1")

        # Вариант 23.
        elif x_ == x-1:
            index = int(l[y_-1][x_-1]) + int(l[y_-1][x_]) + int(l[y_][x_-1]) + int(l[y_+1][x_-1]) + int(l[y_+1][x_])
            #print("Вариант 23. Проверил клетки "+str(y_-1)+str(x_-1)+", "+str(y_-1)+str(x_)+", "+str(y_)+str(x_-1)+", "+str(y_+1)+str(x_-1)+", "+str(y_+1)+str(x_))

        # Вариант 22.
        else:
            index = int(l[y_-1][x_-1]) + int(l[y_-1][x_]) + int(l[y_-1][x_+1]) + int(l[y_][x_-1]) + int(l[y_][x_+1]) \
            + int(l[y_+1][x_-1]) + int(l[y_+1][x_]) + int(l[y_+1][x_+1])
            #print("Вариант 22. Проверил клетки "+str(y_-1)+str(x_-1)+", "+str(y_-1)+str(x_)+", "+str(y_-1)+str(x_+1)+", "+ \
            #      str(y_)+str(x_-1)+", "+str(y_)+str(x_+1)+", "+str(y_+1)+str(x_-1)+", "+str(y_+1)+str(x_)+", "+str(y_+1)+str(x_+1))

    if index == 0:
        return ' '
    else:
        return str(index)

# Начало работы.
# Начальный текст.

print("Приветствую в игре Minesweeper!\n")
print("Аналог Minesweeper на Python. Поддерживает сетку от 2x2 до 35х35")
print("Всё просто: вы вбиваете координаты клетки, и что ей надо сделать.")
print("A3 - открыть клетку A3.")
print("A3f - пометить клетку A3 флагом.")
print("0 для выхода и в меню, и в игре.")
print("Закрытая клетка помечена #, открытая - пробелом или цифрой, помеченная флажком - буквой F.")
print("Вот и всё, всё остальное вы увидите в игре! Удачи!\n")

debug = False

# Главный цикл.
while True:

    # Выбор уровня.
    print("1. Лёгкий уровень: 9х9 (10 мин)")
    print("2. Средний уровень: 16x16 (40 мин)")
    print("3. Тяжёлый уровень: 16х30 (99 мин)")
    print("4. Кастомный уровень.")

    # Ввод.
    Mctd = input("Введите номер уровня (0 - выйти): ")

    # Выход.
    if Mctd == '0':
        break

    # 1. Лёгкий уровень. 
    elif Mctd == '1':
        x = 9
        y = 9
        mines = 10

    # 2. Средний уровень.
    elif Mctd == '2':
        x = 16
        y = 16
        mines = 40

    # 3. Тяжёлый уровень.
    elif Mctd == '3':
        x = 30
        y = 16
        mines = 99

    # 4. Кастомный уровень.
    elif Mctd == '4':

        # Ввод трёх значений, из которых составляется поле.
        ctd = input("Через запятую x, y, мины: ")

        # Разделяем на список и выделяем значения.
        ctdl = ctd.split(", ")
        try:
            x = int(ctdl[0])
            y = int(ctdl[1])
            mines = int(ctdl[2])

            # Конечно, есть правила. Сетка от 2х2 до 35х35,
            # и мин не может быть больше, чем клеток.
            if x<2 or y<2 or mines>x*y or x>35 or y>35:
                print("Неправильный ввод!\n")
                continue

        # И, конечно, предупреждение ошибок.
        except (ValueError, IndexError, TypeError) as inputErrors:
            print("Неправильный ввод!\n")
            continue

    # Дебаггер.
    elif Mctd == 'debug':
        if debug == True:
            debug = False
        elif debug == False:
            debug = True

    # И неправильный ввод.
    else:
        print("Неправильный ввод!\n")
        continue

    # Так, теперь переходим к генерации списка.

    # Он генерируется сложением 3-х отдельных списков:
    # list_mines - двумерный список, карта мин.
    # 1 - есть мина, 0 - её нет. Определённое количество
    # чисел перемешивается и разбивается в сетку.
    
    _string = '1'*mines+'0'*(x*y-mines)
    _listy = list(_string)
    random.shuffle(_listy)
    list_mines = []
    for s in range(0, y):
        list_mines.append(_listy[s*x:s*x+x])
    if debug:
        print("\n\nList_mines:\n")
        print(list_mines)
        for listt in list_mines:
            print(listt)

    # list_indexes - в нём для каждой клетки обозначено
    # количество мин вокруг неё. Тоже двумерен.
    # Поочерёдно добавляютися значения для каждой клетки.
    
    list_indexes = []
    for _y_ in range(0, y):
        l_indexes = []
        for _x_ in range(0, x):
            try:
                idx = index(x, y, _x_, _y_, list_mines)
            except IndexError:
                print("IndexError: too little arguments")
                continue
            except ValueError:
                print("ValueError: invalid input")
                continue

            l_indexes.append(idx)
        list_indexes.append(l_indexes)
    if debug:
        print("\n\nList_indexes:\n")
        print(list_indexes)
        for listt in list_indexes:
           print(listt)

    # И, наконец, list_mds. В нём сохраняются начальные
    # режимы клеток. В начале все они - 'c'.

    list_mds = []
    for y_ in range(0, y):
        l_mds = []
        for x_ in range(0, x):
            l_mds.append('c')
        list_mds.append(l_mds)
    if debug:
        print("\n\nList_mds:\n")
        print(list_mds)
        for listt in list_mds:
            print(listt)

    # И в список lt сохраняются все эти списки.
    # Вернее, это уже трёхмерный список, ведь для
    # каждой клетки ещё один список с каждым значением из
    # прошлых списков.

    lt = []
    for y_ in range(0, y):
        _lt = []
        for x_ in range(0, x):
            __lt = []
            __lt.append(list_mines[y_][x_])
            __lt.append(list_indexes[y_][x_])
            __lt.append(list_mds[y_][x_])
            _lt.append(__lt)
        lt.append(_lt)

    if debug:
        print("\n\nlt:\n")
        print(lt)
        for listt in lt:
            print(listt)
        print("\n")

    # flags_total - флагов ровно столько же, сколько и мин.

    flags_total = mines
    flags = 0

    mines_flagged = 0

    # Игровой цикл.
    while True:
        flags = 0
        for y_ in range(0, y):
            for x_ in range(0, x):
                if lt[y_][x_][2] == 'f':
                    flags += 1

        print("\nFlags left: "+str(flags)+"/"+str(flags_total))

        # Графическое построение карты.
        # Ладно, мне лень объяснять.

        _DSG = "   |"
        for i in range(1, x+1):
            if i == 10:
                _I = "A"
            elif i == 11:
                _I = "B"
            elif i == 12:
                _I = "C"
            elif i == 13:
                _I = "D"
            elif i == 14:
                _I = "E"
            elif i == 15:
                _I = "F"
            elif i == 16:
                _I = "G"
            elif i == 17:
                _I = "H"
            elif i == 18:
                _I = "I"
            elif i == 19:
                _I = "J"
            elif i == 20:
                _I = "K"
            elif i == 21:
                _I = "L"
            elif i == 22:
                _I = "M"
            elif i == 23:
                _I = "N"
            elif i == 24:
                _I = "O"
            elif i == 25:
                _I = "P"
            elif i == 26:
                _I = "Q"
            elif i == 27:
                _I = "R"
            elif i == 28:
                _I = "S"
            elif i == 29:
                _I = "T"
            elif i == 30:
                _I = "U"
            elif i == 31:
                _I = "V"
            elif i == 32:
                _I = "W"
            elif i == 33:
                _I = "X"
            elif i == 34:
                _I = "Y"
            elif i == 35:
                _I = "Z"
            else:
                _I = str(i)
            _DSG += " "+_I+" |"
        _DSG += "\n --+"
        for i in range(1, x+1):
            _DSG += "---+"
        _DSG += "\n"
        for k in range(1, y+1):
            if k == 10:
                _K = "A"
            elif k == 11:
                _K = "B"
            elif k == 12:
                _K = "C"
            elif k == 13:
                _K = "D"
            elif k == 14:
                _K = "E"
            elif k == 15:
                _K = "F"
            elif k == 16:
                _K = "G"
            elif k == 17:
                _K = "H"
            elif k == 18:
                _K = "I"
            elif k == 19:
                _K = "J"
            elif k == 20:
                _K = "K"
            elif k == 21:
                _K = "L"
            elif k == 22:
                _K = "M"
            elif k == 23:
                _K = "N"
            elif k == 24:
                _K = "O"
            elif k == 25:
                _K = "P"
            elif k == 26:
                _K = "Q"
            elif k == 27:
                _K = "R"
            elif k == 28:
                _K = "S"
            elif k == 29:
                _K = "T"
            elif k == 30:
                _K = "U"
            elif k == 31:
                _K = "V"
            elif k == 32:
                _K = "W"
            elif k == 33:
                _K = "X"
            elif k == 34:
                _K = "Y"
            elif k == 35:
                _K = "Z"
            else:
                _K = str(k)
            _DSG += " "+_K+" |"
            for i in range(1, x+1):
                if lt[k-1][i-1][2] == 'c':
                    _DSG += " # |"
                elif lt[k-1][i-1][2] == 'o':
                    _DSG += " "+lt[k-1][i-1][1]+" |"
                elif lt[k-1][i-1][2] == 'f':
                    _DSG += " F |"
            _DSG += "\n --+"
            for i in range(1, x+1):
                _DSG += "---+"
            _DSG += "\n"

        print(_DSG)

        # Теперь ввод команды.
        # b2 - означает открыть клетку (B по X, 2 по Y).
        # b2f - означает пометить флажком эту клетку.
        # debug - включить/выключить дебаггер. Ещё не доделал.
        # 0 - выход из игры.

        ct2 = input("Введите команду: ")

        # Выход из игры.
        if ct2 == '0':
            break

        # Проверка на правильность написания.
        try:
            __y = list(ct2)[0]
            __x = list(ct2)[1]
        except (ValueError, IndexError, TypeError) as inputErrors:
            print("Incorrect input. Try again")
            continue

        # Перевод в координаты.
        _x = _(__x)
        _y = _(__y)

        # Проверка на команду флажком.
        try:

            # Помечаем клетку, либо размечаем.
            mode = list(ct2)[2]
            if lt[_y][_x][2] == 'f':
                lt[_y][_x][2] = 'c'
            else:
                lt[_y][_x][2] = 'f'

            if lt[_y][_x][0] == '1':
                mines_flagged += 1

            if mines_flagged == mines:
                print("\nYou won!\n")
                _DSG = "   |"
                for i in range(1, x+1):
                    if i == 10:
                        _I = "A"
                    elif i == 11:
                        _I = "B"
                    elif i == 12:
                        _I = "C"
                    elif i == 13:
                        _I = "D"
                    elif i == 14:
                        _I = "E"
                    elif i == 15:
                        _I = "F"
                    elif i == 16:
                        _I = "G"
                    elif i == 17:
                        _I = "H"
                    elif i == 18:
                        _I = "I"
                    elif i == 19:
                        _I = "J"
                    elif i == 20:
                        _I = "K"
                    elif i == 21:
                        _I = "L"
                    elif i == 22:
                        _I = "M"
                    elif i == 23:
                        _I = "N"
                    elif i == 24:
                        _I = "O"
                    elif i == 25:
                        _I = "P"
                    elif i == 26:
                        _I = "Q"
                    elif i == 27:
                        _I = "R"
                    elif i == 28:
                        _I = "S"
                    elif i == 29:
                        _I = "T"
                    elif i == 30:
                        _I = "U"
                    elif i == 31:
                        _I = "V"
                    elif i == 32:
                        _I = "W"
                    elif i == 33:
                        _I = "X"
                    elif i == 34:
                        _I = "Y"
                    elif i == 35:
                        _I = "Z"
                    else:
                        _I = str(i)
                    _DSG += " "+_I+" |"
                _DSG += "\n --+"
                for i in range(1, x+1):
                    _DSG += "---+"
                _DSG += "\n"
                for k in range(1, y+1):
                    if k == 10:
                        _K = "A"
                    elif k == 11:
                        _K = "B"
                    elif k == 12:
                        _K = "C"
                    elif k == 13:
                        _K = "D"
                    elif k == 14:
                        _K = "E"
                    elif k == 15:
                        _K = "F"
                    elif k == 16:
                        _K = "G"
                    elif k == 17:
                        _K = "H"
                    elif k == 18:
                        _K = "I"
                    elif k == 19:
                        _K = "J"
                    elif k == 20:
                        _K = "K"
                    elif k == 21:
                        _K = "L"
                    elif k == 22:
                        _K = "M"
                    elif k == 23:
                        _K = "N"
                    elif k == 24:
                        _K = "O"
                    elif k == 25:
                        _K = "P"
                    elif k == 26:
                        _K = "Q"
                    elif k == 27:
                        _K = "R"
                    elif k == 28:
                        _K = "S"
                    elif k == 29:
                        _K = "T"
                    elif k == 30:
                        _K = "U"
                    elif k == 31:
                        _K = "V"
                    elif k == 32:
                        _K = "W"
                    elif k == 33:
                        _K = "X"
                    elif k == 34:
                        _K = "Y"
                    elif k == 35:
                        _K = "Z"
                    else:
                        _K = str(k)
                    _DSG += " "+_K+" |"
                    for i in range(1, x+1):
                        lt[k-1][i-1][2] = 'o'
                        if lt[k-1][i-1][0] == '0':
                            _DSG += " "+lt[k-1][i-1][1]+" |"
                        else:
                            _DSG += " Q |"
                    _DSG += "\n --+"
                    for i in range(1, x+1):
                        _DSG += "---+"
                    _DSG += "\n"
                print(_DSG)
                break

        # Если пользователь захотел открыть клетку.
        except IndexError:
            try: current_opening = open_case(y, x, _y, _x, lt)
            except IndexError: print("Неправильный ввод!"); continue
            if current_opening:
                print("\nGame over!\n")
                _DSG = "   |"
                for i in range(1, x+1):
                    if i == 10:
                        _I = "A"
                    elif i == 11:
                        _I = "B"
                    elif i == 12:
                        _I = "C"
                    elif i == 13:
                        _I = "D"
                    elif i == 14:
                        _I = "E"
                    elif i == 15:
                        _I = "F"
                    elif i == 16:
                        _I = "G"
                    elif i == 17:
                        _I = "H"
                    elif i == 18:
                        _I = "I"
                    elif i == 19:
                        _I = "J"
                    elif i == 20:
                        _I = "K"
                    elif i == 21:
                        _I = "L"
                    elif i == 22:
                        _I = "M"
                    elif i == 23:
                        _I = "N"
                    elif i == 24:
                        _I = "O"
                    elif i == 25:
                        _I = "P"
                    elif i == 26:
                        _I = "Q"
                    elif i == 27:
                        _I = "R"
                    elif i == 28:
                        _I = "S"
                    elif i == 29:
                        _I = "T"
                    elif i == 30:
                        _I = "U"
                    elif i == 31:
                        _I = "V"
                    elif i == 32:
                        _I = "W"
                    elif i == 33:
                        _I = "X"
                    elif i == 34:
                        _I = "Y"
                    elif i == 35:
                        _I = "Z"
                    else:
                        _I = str(i)
                    _DSG += " "+_I+" |"
                _DSG += "\n --+"
                for i in range(1, x+1):
                    _DSG += "---+"
                _DSG += "\n"
                for k in range(1, y+1):
                    if k == 10:
                        _K = "A"
                    elif k == 11:
                        _K = "B"
                    elif k == 12:
                        _K = "C"
                    elif k == 13:
                        _K = "D"
                    elif k == 14:
                        _K = "E"
                    elif k == 15:
                        _K = "F"
                    elif k == 16:
                        _K = "G"
                    elif k == 17:
                        _K = "H"
                    elif k == 18:
                        _K = "I"
                    elif k == 19:
                        _K = "J"
                    elif k == 20:
                        _K = "K"
                    elif k == 21:
                        _K = "L"
                    elif k == 22:
                        _K = "M"
                    elif k == 23:
                        _K = "N"
                    elif k == 24:
                        _K = "O"
                    elif k == 25:
                        _K = "P"
                    elif k == 26:
                        _K = "Q"
                    elif k == 27:
                        _K = "R"
                    elif k == 28:
                        _K = "S"
                    elif k == 29:
                        _K = "T"
                    elif k == 30:
                        _K = "U"
                    elif k == 31:
                        _K = "V"
                    elif k == 32:
                        _K = "W"
                    elif k == 33:
                        _K = "X"
                    elif k == 34:
                        _K = "Y"
                    elif k == 35:
                        _K = "Z"
                    else:
                        _K = str(k)
                    _DSG += " "+_K+" |"
                    for i in range(1, x+1):
                        lt[k-1][i-1][2] = 'o'
                        if lt[k-1][i-1][0] == '0':
                            _DSG += " "+lt[k-1][i-1][1]+" |"
                        else:
                            _DSG += " Q |"
                    _DSG += "\n --+"
                    for i in range(1, x+1):
                        _DSG += "---+"
                    _DSG += "\n"
                print(_DSG)
                break

        except TypeError:
            continue
        
sleep(0.1)

#   | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z |
# --+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
# 1 | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # |
# --+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
# 2 | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # |
# --+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
# 3 | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | F | 3 | 3 | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # |
# --+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
# 4 | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | 2 | 1 |   | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # |
# --+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
# 5 | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | 1 |   |   | # | # | # | # | # | # | # | # | # | # | # |   | # | # |   |   |
# --+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
# 6 | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # |   |   | 1 | # | # | # | # | # | 5 | # | # | # | # |   |   |   |   |   |   |
# --+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
# 7 | # | # | # | # | # | # | 4 | # | # | # | # | # | # | # | # | # |   |   | # | # | # | # | # | 4 | # | # | # | # |   |   |   |   |   |   | # |
# --+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
# 8 | # | # | # | # | # |   |   | 2 |   | 3 | # | # | # | # | # | # | # |   | # | # | # | # | # | # | # | # | # | # |   |   |   |   |   | # | # |
# --+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
# 9 | # | # | # | # | # | 1 |   |   | 1 | 1 | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # |   | # |   |   |   | # | # |
# --+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
# A | # | # | # | # | # | # |   |   | 3 | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # |
# --+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
# B | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # |
# --+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
# C | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # | # |
# --+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

# Один большой список со вложенными списками со вложенными списками.
# Вложенные списки в большой - это строки. Каждый подвложенный список - клетка.
# Для клетки нужно: минное значение, режим, заминирована ли.
# Минное значение: от '1' до '8' и ' ' для '0'.
# Режим:
#   'c' ('closed') - нераскрытая клетка. 
#   'o' ('opened') - раскрытая клетка. Открывается вбиванием координат.
#   'f' ('flagged') - помеченная флажком клетка. Открывается вбиванием координат и символа "F"/"f".
# То есть список для 1 клетки такой: ['3', 'closed', '1'] - около неё 3 мины, клетка закрыта, клетка заминирована.
